{"version":3,"sources":["../../src/pages/signup/signup.module.ts","../../src/validators/email.ts","../../src/pages/signup/signup.ts","../../src/validators/ra.ts","../../src/validators/matching-passwords.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SignupPage } from './signup';\n\n@NgModule({\n  declarations: [\n    SignupPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SignupPage),\n  ],\n  exports: [\n    SignupPage\n  ]\n})\nexport class SignupModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.module.ts","import { FormControl } from '@angular/forms';\n\nexport class EmailValidator {\n  /**\n   * Verifica se o email é valido através de uma expressão regular.\n   */\n  static isValid(control: FormControl): any {\n    let EMAIL_REGEXP = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;      \n\n    return EMAIL_REGEXP.test(control.value) ? null : { invalidEmail : true};\n\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { EmailValidator } from '../../validators/email';\nimport { RaValidator } from '../../validators/ra';\nimport { matchingPasswords } from '../../validators/matching-passwords';\n\nimport { AngularFireDatabase, FirebaseObjectObservable } from 'angularfire2/database';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport * as firebase from 'firebase/app';\n\nimport { IonicPage } from 'ionic-angular';\n@IonicPage()\n@Component({\n  selector: 'page-signup',\n  templateUrl: 'signup.html'\n})\nexport class SignupPage {\n\n  //A FormGroup is a collection of FormControls, which is inputed in html.\n  private signupForm: FormGroup;\n\n  //Boolean variable that stores if user tries to submit the form.\n  private submitAttempt: boolean;\n\n  //String variable that stores the server error in a failed signin.\n  private signupError: string;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams,\n    private formBuilder: FormBuilder, private afAuth: AngularFireAuth,\n    public afDB: AngularFireDatabase) {\n\n    //Create FormBuilder with your inputs and their Validators.\n    this.signupForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required, EmailValidator.isValid])],\n      name: ['', Validators.compose([Validators.required, Validators.maxLength(30)])],\n      ra: ['', Validators.compose([Validators.required, Validators.minLength(8), Validators.maxLength(9), RaValidator.isValid,])],\n      password: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      confirmPass: ['', Validators.required],\n      veg: ['false', Validators.required]\n    }, { validator: matchingPasswords('password', 'confirmPass') });\n\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SignupPage');\n  }\n\n  /**\n   * Cria uma conta com email e senha caso o formulário for válido.\n   */\n  signUp(): void {\n    this.submitAttempt = true;\n    if (this.signupForm.valid) {\n      //create a user using AuthService\n      this.afAuth.auth.createUserWithEmailAndPassword(this.signupForm.value.email, this.signupForm.value.password)\n        //then, call onSignUpSuccess\n        .then(() => this.onSignUpSuccess())\n        //if there is an error, display to the user.\n        .catch(error => this.signupError = error.message);\n\n      //go to login page after all.\n      //this.navCtrl.push('LoginPage');\n    } else {\n      console.log('signupForm is not valid.');\n    }\n  }\n\n  /**\n   * Executa funções após o signUp().\n   */\n  onSignUpSuccess(): void {\n    this.postSignup(this.afAuth.auth.currentUser.uid, this.signupForm.value) //store the additional info (name, RA) into the database\n      .then(() => this.onPostSignUpSuccess())\n      .catch(error => { console.log('error on postSignup()', error.message); });\n\n  }\n\n  /**\n   * Armazena os outros dados do usuário na árvore /users/\n   */\n  postSignup(uid: string, data): firebase.Promise<any> {\n    let user: FirebaseObjectObservable<any>;\n    user = this.afDB.object(`users/${uid}`);\n    return user.set(({\n      name: data.name,\n      ra: data.ra,\n      email: data.email,\n      saldo: 0,\n      refeicoes: {},\n      veg: data.veg,\n      created_at: firebase.database.ServerValue.TIMESTAMP,\n      updated_at: firebase.database.ServerValue.TIMESTAMP\n    }));\n  }\n\n  /**\n   * Desloga o usuário após a criação (O login após signup é padrão do Firebase).\n   */\n  onPostSignUpSuccess(): void {\n    console.log('onPostSignUpSuccess()');\n    this.afAuth.auth.signOut();\n    this.navCtrl.push('LoginPage');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.ts","import { FormControl } from '@angular/forms';\n\nexport class RaValidator {\n  static isValid(control: FormControl): any {\n    let RA_REGEXP = /^\\d+$/;  //Valida somente números. Para uma aplicação melhor, deve-se validar o RA no sistema da UNESP.\n\n    return RA_REGEXP.test(control.value) ? null : { invalidRA: true};\n\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/ra.ts","import { FormGroup } from '@angular/forms';\n/**\n* Verifica se a senha e confirmação de senha digitadas estão iguais.\n*/\nexport function matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\n  return (group: FormGroup): {[key: string]: any} => {\n    let password = group.controls[passwordKey];\n    let confirmPassword = group.controls[confirmPasswordKey];\n    \n    if (password.value !== confirmPassword.value) {\n      return {\n        mismatchedPasswords: true\n      };\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/matching-passwords.ts"],"sourceRoot":""}